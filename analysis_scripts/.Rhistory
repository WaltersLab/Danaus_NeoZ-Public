data.sim <- SimData(counts = counts[, 1:10],  treatment = treatment[1:10], #
sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 1000)
data.sim <- SimData(counts = counts[, 1:10],  treatment = treatment[c(2,1,3:10)], #
sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 1000)
simKid <- SimData(counts = kidney$counts[1:12542, 1:10], treatment = sort(trt1), sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 500)
simKid <- SimData(counts = kidney$counts[1:12542, 1:10], treatment = (trt1), sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 500)
simKid <- SimData(counts = kidney$counts[1:12542, 1:10], treatment = rev(trt1), sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 500)
tmp <- checkTrt(1:10)
checkTrt <- function(trt) {#
data.sim <- SimData(counts = counts[, 1:10],  treatment = treatment[trt], sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 1000)#
return(data.sim)#
}
tmp <- checkTrt(1:10)
tmp <- checkTrt(10:1)
tmp <- checkTrt(c(5:1, 10:6))
tmp <- checkTrt(c(3:1, 10:4))
simKid <- SimData(counts = kidney$counts[1:12542, 1:10], treatment = rev(trt1), sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 500)
simKid <- SimData(counts = kidney$counts[1:12542, 1:10], treatment = sort(trt1), sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 500)
trt <- factor(rep("A", 5), rep("B", 5))
trt
trt <- factor(c(rep("A", 5), rep("B", 5)))
trt
checkTrt <- function(trt) {#
data.sim <- SimData(counts = counts[, 1:10],  treatment = trt, sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 1000)#
return(data.sim)#
}
tmp <- checkTrt(trt)
tmp <- checkTrt(rev(trt))
tmp <- checkTrt(sample(trt))
sample(trt)
sim1 <- SimData(counts = cD@data, treatment = replicates(cD), sort.method = "unpaired", k.ind = 2, n.genes = 1000, n.diff = 100)
simKid <- SimData(counts = kidney$counts[, 1:10], treatment = trt1, sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 500)
simKid <- SimData(counts = kidney$counts[, 1:10], treatment = trt1, sort.method = "unpaired", k.ind = 2, n.genes = 1000, n.diff = 100)
simKid <- SimData(counts = kidney$counts[, 1:10], treatment = trt2, sort.method = "unpaired", k.ind = 2, n.genes = 1000, n.diff = 100)
trt2 <- sort(trt1)
simKid <- SimData(counts = kidney$counts[, 1:10], treatment = trt2, sort.method = "unpaired", k.ind = 2, n.genes = 1000, n.diff = 100)
simKid <- SimData(counts = kidney$counts[, 1:10], treatment = sample(trt2), sort.method = "unpaired", k.ind = 2, n.genes = 1000, n.diff = 100)
sim1 <- SimData(counts = cD@data, treatment = replicates(cD), sort.method = "unpaired", k.ind = 2, n.genes = 1000, n.diff = 100)
sim1 <- SimData(counts = cD@data, treatment = replicates(cD), sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 1000)
sim1 <- SimData(counts = cD@data, treatment = replicates(cD), sort.method = "unpaired", k.ind = 5, n.genes = 5000, n.diff = 1000, samp.independent = T)
sim1 <- SimData(counts = cD@data, treatment = replicates(cD), sort.method = "unpaired", k.ind = 5, n.genes = 5000, n.diff = 1000, samp.independent = F)
sim1 <- SimData(counts = cD@data, treatment = replicates(cD), sort.method = "unpaired", k.ind = 2, n.genes = 5000, n.diff = 1000, samp.independent = T)
str(sim1)
sim1L <- new("lociData", data = sim1$counts, replicates = sim1$treatment, seglens = seglens(cD)[sim1$genes.subset], annotation = data.frame("chrom" = cD@annotation$chrom.um[sim1$genes.subset]))
sim1L
libsizes(sim1L) <- getLibsizes(sim1L)
dmsim1 <- cD.DM(sim1L)
head(dmsim1)
sim1$treatment
head(dmcyd)
head(dmCounts)
str(dmsim1)
sim1.gl <- glSeq(dmsim1, "-1 + chrom + replicate")
head(rownames(kidney))
head(kidney)
names(kidney)
head(kidney[[1]])
### Example 1: Simulate Matrix with 1000 DE genes and 4000 EE genes#
data.sim <- SimData(counts = counts[, 1:10], replic = sample(replic[1:10]), treatment = treatment[1:10], #
sort.method = "paired", k.ind = 2, n.genes = 5000, n.diff = 1000,#
norm.factors = nf[1:10])
6000/60
8*1705
8*2165
01 – (.22 + .44)
01 - (.22 + .44)
0.44 + 0.5 * .34
0.22 + 0.5 * .34
3/2000
1997/2000
2*1997
3994/4000
1 - .124 - .664
.124 + 0.5 * .212
0.662 + 0.5 * .212
1-.768
1 - 0.124 - 0.664
.124 + .664 + .212
.124 + 0.5 * .212
0.662 + 0.5 * .212
1-0.23
1 - 0.124 - 0.662
.124 + 0.5 * .214
1 – 0.231
1 - 0.231
0.662 + 0.5 * .214
145/577
321/577
(577 – 145 – 321) /577
(577 - 145 - 321) /577
1 - 0.2513 - 0.5633
1 - 0.2513 - 0.5563
0.1924  + 0.5 * 0.5563
[ 2 * (577 - 145 - 321) + 321 ] / 2 * 577
( 2 * (577 - 145 - 321) + 321 ) / 2 * 577
( 2 * (577 - 145 - 321) + 321 ) / (2 * 577)
12 ^ .5
.09 ^ .5
.7^2
2 * . 7 * .3
2 * .7 * .3
.2/1.8
0.8 * .338 =
0.8 * .338
0.8 * .4225
.338 + .354 + .1225
.338 + .364 + .1225
.8 * .455
.338 + .364 + .1225
.338/.8254
.364/.8254
.1225/.8254
1.5 * 2.5
1.5 * 150
2^.69
4.54e-2
.05/3
x <- 1:10
x
x +5
4.54E-02
citation()
100/630
100/649
50/649
75/649
400/649
hmean <- function(x) {#
length(x) / sum(x^-1)#
}
? mean
? hmean
?? harmonic mean
??harmonic
hmean(c(4,9))
t <- rpois(100, 20)
t
mean(t)
hmean(t)
t <- rgeom(100, .1)
t
mean(t)
hmean(t)
hist(hmean)
hist(t)
t <- rgeom(100, .9)
hist(t)
? rgeom
hmean(t)
mean(1/t)
t
t <- rgeom(100, .1)
t <- rep(5, 20), 2000)
t
t <- c(rep(5, 20), 2000)
t
mean(t)
hmean(t)
library(baySeq)
Pn <- 155#
Fn <- 3660#
Ps <- 182#
Fs <- 4151#
#
(Pn/Fn)/(Ps/Fs)
(36/63)*4151
? grep
? pdf
546/700
546.5/700
98/150
make.box <- function( xleft = 1, ybottom = 1, width = 1, height = 4, out.line = 0.3, med.cex = 0.15, whisk.lwd = 2,  ...) {#
	segments( x0 = xleft + 0.5*width, y0 = ybottom - out.line*height, y1 = ybottom + (1 + out.line) * height, lwd = whisk.lwd)#
	rect(xleft = xleft, ybottom = ybottom, xright = xleft+width, ytop = ybottom + height,...)#
	segments(x0 = xleft - med.cex * width, x1 = xleft + (1 + med.cex) * width, y0 = ybottom + height/2, lwd = whisk.lwd )#
}#
#quartz.options(height=6, width=6, dpi=72);#
#
plot.xa <- function(ybot = c(3,3,3,3), colors = c("grey60", "red", "grey60", "red"), y.lab = "", ...) {#
	plot.new();#
	# par(oma=c(1,1,1,1), mar=c(3,3,1,1))  #
	xL <- c(1,2,3.7, 4.7)#
	#plot(xL, xlim=c(1, 5.5), ylim=c(1, 8), type = "n" )	#
	plot.window(xlim=c(.8, 5.5), ylim=c(1, 8) )	#
	for (i in 1:4) {#
		make.box(xleft = xL[i], ybottom = ybot[i], width = 0.6, height = 3, col = colors[i], ...)	#
	}#
	symbol.cex <- 2#
	symbol.line <- 2#
	mtext("\\MA", family='HersheySymbol', side=1, at =1.7, line = symbol.line,  cex=symbol.cex) # \u2642#
	mtext("\\VE", family='HersheySymbol', side=1, at = 4.5, line = symbol.line,  cex=symbol.cex) # \u2640#
	mtext(y.lab, side = 2, line = 1, cex = 1)#
#
	axis(1, at=c(0,10))#
	axis(2, at=c(0, 10))#
	axis(4, at=c(0, 10))#
}#
#
#plot.xa(ybot = c(3,2,3,2), density = 20)#
plot.mf <- function( xchr.shift = 0, sd = 0.4, y.lim, lwd = 3 ) {#
#
	x <- seq(-1.9,1.9, length = 500)#
	y <- dnorm(x, mean = 0, sd = sd)#
	y2 <- y * .85#
	plot.new();#
	#par(oma=c(1,1,1,1), mar=c(3,3,1,1))#
	plot.window(xlim=c(-2,2), ylim=c(0, 1.1 * max(y)) )	#
	lines(x+xchr.shift, y2, col = "red", type = "l" , lwd = lwd)#
	lines(x,y, type = "l", lwd = lwd, col = "grey50")#
	axis(2, at=c(-10,10))#
	axis(1, at=seq(-3, 3, 1))#
#
	mtext(text = expression(Log[2](Male:Female)), side = 1, line = 2.8, cex = 0.8)#
	#mtext("Distribution Density", side = 2, line = 2, cex = 1)#
}#
# text - character, text to be plotted#
# side - numeric, 1=bottom 2=left 3=top 4=right#
# off  - numeric, offset in inches from the edge of the plotting region#
# srt  - string rotation in degrees#
# ...  - additional arguments passed to text()#
mtexti <- function(text, side, off = 0.25,#
                   srt = if(side == 2) 90  else#
                         if(side == 4) 270 else 0, ...) {#
    # dimensions of plotting region in user units#
    usr <- par('usr')#
    # dimensions of plotting region in inches#
    pin <- par('pin')#
    # user units per inch#
    upi <- c(usr[2]-usr[1],#
             usr[4]-usr[3]) / pin#
    # default x and y positions#
    xpos <- (usr[1] + usr[2])/2#
    ypos <- (usr[3] + usr[4])/2#
    if(1 == side)#
        ypos <- usr[3] - upi[2] * off#
    if(2 == side)#
        xpos <- usr[1] - upi[1] * off#
    if(3 == side)#
        ypos <- usr[4] + upi[2] * off#
    if(4 == side)#
        xpos <- usr[2] + upi[1] * off#
    text(x=xpos, y=ypos, text, xpd=NA, srt=srt, ...)#
}
cexMain = 1.3#
cexSub = 0.75#
jpeg(file=("DosageTypes_Combo-AA.jpg"), w = 9, h = 5, units = "in", res = 300)#
par(mfcol = c(2,4), oma=c(3,2,1,3), mar=c(2,1,3,1) )#
#
# Complete + Balance#
plot.xa(ybot = c(3,3,3,3), y.lab = "Gene Expression")#
mtext("Type I", line = 1.9, cex = cexMain)#
mtext("X = XX = AA", line = 0.5, cex = cexSub)#
plot.mf(xchr.shift = 0)#
mtext("Distribution Density", side = 2, line = 1, cex = 1)#
#
# Incomplete + with Balance#
plot.xa(ybot = c(3,2,3,2))#
mtext("Type II", line = 1.9, cex = cexMain)#
mtext("X = XX < AA", line = 0.5, cex = cexSub)#
plot.mf(xchr.shift = 0.0)#
#
# Incomplete + No Balance#
plot.xa(ybot = c(3,2,3,3))#
mtext("Type III", line = 1.9, cex = cexMain)#
mtext("X < XX = AA", line = 0.5, cex = cexSub)#
plot.mf(xchr.shift = -0.8)#
#
# Complete + No Balance#
plot.xa(ybot = c(3,3,3,4))#
mtexti("Ancestral:Current\nExpression Ratio", side = 4, cex = 1.3)#
mtext("Type IV", line = 1.9, cex = cexMain)#
mtext("X = AA < XX ", line = 0.5, cex = cexSub)#
plot.mf(xchr.shift = -.8)#
#
xLeft <- 1.3#
yBot <- 0.9#
#
text(x = xLeft, y = c(yBot + 0.3 , yBot) , labels = c("Autosomes", "X chrom"), xpd = NA , cex = 1.5, adj = 0)#
rect(xleft = xLeft, ybottom = c(yBot + 0.1, yBot-0.2), xright = xLeft + 0.5, ytop = c(yBot+.2, yBot - .1), col = c("grey50", "red") )#
segments(x0 = xLeft + .8, x1= xLeft + 1.5, y0 = c(yBot + .15, yBot - .15), col = c("grey50", "red"), lwd = 3, xpd = NA)#
dev.off()
getwd()
setwd("~/Documents/Projects/Monarch_Zlinkage_by_Orthology/analysis_scripts")
coveragedata <- read.table("../input_files/mergedcoveragedepth.txt",header=T, stringsAsFactors = F)
scaffL <- sort(coveragedata$Length, decreasing=T)
head(coveragedata)
tmp <- t (t(coveragedata[,3:8]) / colMeans(coveragedata[,3:8]) )  #JRW
covw <- cbind(coveragedata[, 1:2], tmp)
head(covw)
head(tmp)
apply(coveragedata, MARGIN = 2, function(x) {sum(is.na)})
apply(coveragedata, MARGIN = 2, function(x) {sum(is.na(x))})
? no.omit
? na.omit
example(na.omit)
coveragedata[is.na(coveragedata), ]
coveragedata[which(is.na(coveragedata)), ]
coveragedata[apply(coveragedata, MARGIN = 1, function(x) {any(is.na(x))}) ,]
? colMeans
tmp <- t (t(coveragedata[,3:8]) / colMeans(coveragedata[,3:8], na.rm = T) )  #JRW
covw <- cbind(coveragedata[, 1:2], tmp)
head(covw)
coverageforw[,3:8] <- tmp  #JRW
normcov <- covw[order(covw$Length, decreasing = T), ]
##normalize coverage data#
tmp <- t (t(coveragedata[,3:8]) / colMeans(coveragedata[,3:8], na.rm = T) )  #JRW#
covw <- cbind(coveragedata[, 1:2], tmp)#
normcov <- covw[order(covw$Length, decreasing = T), ]#
# if (is.unsorted(normcov$Length) ) {stop("normcov vector isn't sorted by length") }
malemean2 <- rowMeans(normcov[, m.ind])
m.ind <-c(3,6,8)
f.ind <-c(4,5,7)
malemean2 <- rowMeans(normcov[, m.ind])
femalemean2 <- rowMeans(normcov[, f.ind])
normcov$log2mf <- log2(malemean2/femalemean2)
head(normcov)
plot(normcov$log2mf ~ log10(normcov$Length))
abline(v = log10(5000))
abline(v = log10(3000))
normcov[normcov$Length > 3000 & normcov$log2mf < -1,]
sum(is.na(normcov$log2mf))
normcov[ is.na(normcov$log2mf), ]
dim(coveragedata)
malemean2 <- rowMeans(normcov[, m.ind], na.rm = T)#
femalemean2 <- rowMeans(normcov[, f.ind], na.rm = T)#
#now make the ratio#
normcov$log2mf <- log2(malemean2/femalemean2)
sum(is.na(normcov$log2mf))
normcov[ is.na(normcov$log2mf), ]
plot(normcov$log2mf ~ log10(normcov$Length))#
abline(v = log10(3000))
sum(is.na(normcov$log2mf)) # about
dim(normcov)
normcov<- normcov[ is.na(normcov$log2mf), ]
plot(normcov$log2mf ~ log10(normcov$Length))
normcov[normcov$Length > 3000 & normcov$log2mf < -1,]
dim(normcov)
coveragedata <- read.table("../input_files/mergedcoveragedepth.txt",header=T, stringsAsFactors = F)#
#
apply(coveragedata, MARGIN = 2, function(x) {sum(is.na(x))})#
coveragedata[apply(coveragedata, MARGIN = 1, function(x) {any(is.na(x))}) ,]#
coveragedata[which(is.na(coveragedata)), ]#
#
##normalize coverage data#
tmp <- t (t(coveragedata[,3:8]) / colMeans(coveragedata[,3:8], na.rm = T) )  #JRW#
covw <- cbind(coveragedata[, 1:2], tmp)#
normcov <- covw[order(covw$Length, decreasing = T), ]#
# if (is.unsorted(normcov$Length) ) {stop("normcov vector isn't sorted by length") }
malemean2 <- rowMeans(normcov[, m.ind], na.rm = T)#
femalemean2 <- rowMeans(normcov[, f.ind], na.rm = T)#
#now make the ratio#
normcov$log2mf <- log2(malemean2/femalemean2)
normcov<- normcov[! is.na(normcov$log2mf), ]
plot(normcov$log2mf ~ log10(normcov$Length))
abline(v = log10(3000))
normcov[normcov$Length > 3000 & normcov$log2mf < -1,]
normcov[normcov$log2mf < -2,]
gooddata <- apply(normcov[3:8,], MARGIN = 1, function(x) {sum(na.omit(x) > 0) > 4} )
sum(gooddata)
gooddata <- apply(normcov[,3:8], MARGIN = 1, function(x) {sum(na.omit(x) > 0) > 4} )
sum(gooddata)
normcov[goodata & normcov$log2mf < -2 ,]
normcov[gooddata & normcov$log2mf < -2 ,]
gooddata <- apply(normcov[,3:8], MARGIN = 1, function(x) {sum(na.omit(x) > 0) > 3} )
normcov[gooddata & normcov$log2mf < -2 ,]
log10(70000)
normcov[normcov$Length > 3000 & normcov$log2mf < -1,]
scaffL <- sort(coveragedata$Length, decreasing=T)#
genomeSize <- sum(scaffL)#
scaffCumsum <- cumsum(scaffL)#
genome90 <- 0.90 * genomeSize
genome90
n90bp <- scaffL[ scaffCumsum > genome90][1]
n90bp
plot(normcov$log2mf ~ log10(normcov$Length), pch = 19, cex = .5)
plot(normcov$log2mf ~ log10(normcov$Length), pch = 19, cex = .2)
plot(normcov$log2mf ~ log10(normcov$Length), pch = 19, cex = .2, main = "Male:Female Scaffold Coverage in Dplex")
round(normcov[normcov$Length > 3000 & normcov$log2mf < -1,], 3)
cbind(normcov[normcov$Length > 3000 & normcov$log2mf < -1, 1:2], round((normcov[normcov$Length > 3000 & normcov$log2mf < -1,3:9], 3)))
round((normcov[normcov$Length > 3000 & normcov$log2mf < -1,3:9], 3)
cbind(normcov[normcov$Length > 3000 & normcov$log2mf < -1, 1:2], round(normcov[normcov$Length > 3000 & normcov$log2mf < -1,3:9], 3)))
cbind(normcov[normcov$Length > 3000 & normcov$log2mf < -1, 1:2], round(normcov[normcov$Length > 3000 & normcov$log2mf < -1,3:9], 3))
.4608 * .75
.1296 * .75
.4096 + .3456 + .0972
.3456/0.8524
.4096/0.8524
.0972/0.8524
0.4805256+ 0.5 * 0.4054435
1 - 0.6832474
0.6832474 - 0.64
plot(normcov$log2mf ~ log10(normcov$Length), pch = 19, cex = .2, main = "Male:Female Scaffold Coverage in Dplex")
plot(normcov$log2mf ~ log10(normcov$Length), pch = 19, cex = .4, main = "Male:Female Scaffold Coverage in Dplex")
head(coveragedata)
coveragedata[coveragedata$Scaffold = "DPSCF300409"]
coveragedata[coveragedata$Scaffold == "DPSCF300409", ]
head(normcov)
2+.75+.5+1.5+1.5+2
1.5+1.75+2+1.5
